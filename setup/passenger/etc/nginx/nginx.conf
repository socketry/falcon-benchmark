
load_module /usr/lib/nginx/modules/ngx_http_passenger_module.so;

# One per CPU core:
worker_processes auto;

# Maximum number of file descriptors per worker
worker_rlimit_nofile 50000;

# Only log critical errors:
error_log /var/log/nginx/error.log crit;

events {
	# determines how much clients will be served per worker
	# max clients = worker_connections * worker_processes
	# max clients is also limited by the number of socket connections available on the system (~64k)
	worker_connections 4000;

	# optimized to serve many clients with each thread, essential for linux -- for testing environment
	use epoll;

	# accept as many connections as possible, may flood worker connections if set too low -- for testing environment
	multi_accept on;
}

http {
	open_file_cache max=200000 inactive=20s;
	open_file_cache_valid 30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors on;
	
	include mime.types;
	default_type application/octet-stream;
	
	access_log off;
	
	# copies data between one FD and other from within the kernel
	# faster than read() + write()
	sendfile on;

	# send headers in one piece, it is better than sending them one by one
	tcp_nopush on;

	# don't buffer data sent, good for small data bursts in real time
	tcp_nodelay on;
	
	keepalive_timeout 60;
	keepalive_requests 100000;
	
	# 8 should be number of CPU threads.
	passenger_root /usr/lib/passenger;
	passenger_max_pool_size 8;
	
	server {
		listen [::]:80;
		server_name passenger;
		
		root /srv/http/benchmark/public;
		
		passenger_enabled on;
		passenger_min_instances 8;
		passenger_ruby /usr/bin/ruby;
		passenger_sticky_sessions on;
	}
}
